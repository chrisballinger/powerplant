// Copyright ©2005, 2006 Freescale Semiconductor, Inc.// Please see the License for the specific language governing rights and// limitations under the License.// -------------------- DEBUG ---------------------#include "PTGraphicConversions.h"#include "SUColorTableBuilder.h"#include <stdio.h>void DoDebug1(){	Int32	width = 32, minWidth = 8, maxWidth = 64;	Int32	height = 32, minHeight = 8, maxHeight = 64;	Int32	newWidth = 0, newHeight = 0;		Boolean okHit = PTResizeDialog::DoResizeDialog( 									width, minWidth, maxWidth, 									height, minHeight, maxHeight,									&newWidth, &newHeight );	if ( okHit )	{		char	aString[ 256 ];		sprintf( aString, "newWidth=%ld  newHeight=%ld", newWidth, newHeight );		CtoPstr( aString );		DebugStr( (unsigned char*) aString );	}}#ifdef XXXXXXXXvoid DoDebug1(){	StSaveGWorld		aSaver;	StandardFileReply	aReply;	PicHandle			thePict = nil;	SUOffscreen			*theOffscreen = nil;	SFTypeList			aTypeList = { 'PICT' };		UDesktop::Deactivate();		::StandardGetFile( nil, 1, aTypeList, &aReply );	UDesktop::Activate();		try	{		thePict = PTGraphicConversions::GetPictFromFile( aReply.sfFile );				Int32 width = (**thePict).picFrame.right - (**thePict).picFrame.left;		Int32 height = (**thePict).picFrame.bottom - (**thePict).picFrame.top;			theOffscreen = SUOffscreen::CreateBuffer( width, height, 32 );		theOffscreen->BeginDrawing();			Rect	r;			::SetRect( &r, 0, 0, width, height );			::DrawPicture( thePict, &r );		theOffscreen->EndDrawing();					Uint32	startTime, stopTime;				startTime = TickCount();					// test the color collection routines		Color32	colorArray[ 257 ];		Int32 numHits = SUColorTableBuilder::CountUniqueColors( theOffscreen, colorArray, 257, false );				stopTime = TickCount();				char string2[ 256 ];		sprintf( string2, "%ld colors. Time = %ld ticks", numHits, stopTime - startTime );				SUErrors::DisplayError( paramErr, string2 );	}	catch( ... )	{		SUMiscUtils::DisposeHandle( (Handle) thePict );		delete theOffscreen;		throw;	}	}#endif	// ??? debug #include "GAPrimaryBox.h"#include "GASecondaryBox.h"void DoDebug2(){	StSaveGWorld			aSaver;	LWindow 				*theWindow = nil;		// these aren't registered yet	URegistrar::RegisterClass ( GAPrimaryBox::class_ID, (ClassCreatorFunc) GAPrimaryBox::CreateGAPrimaryBoxStream );	URegistrar::RegisterClass ( GASecondaryBox::class_ID, (ClassCreatorFunc) GASecondaryBox::CreateGASecondaryBoxStream );				// create the window	::SetGDevice( GetMainDevice() );				// bug in Mac toolbox requires this	theWindow = (PTPaintView*) LWindow::CreateWindow( 9100, LCommander::GetTopCommander() );	theWindow->Show();}#ifdef NOTUSEDvoid DoDebug2(){	CIconHandle		theIcon;	Rect			r = { 0, 0, 32, 32 };		theIcon = ::GetCIcon( 300 );	if ( !theIcon )	{		DebugStr( "\pCan't find icon" );		return;	}		SUOffscreen		*aBuffer = SUOffscreen::CreateBuffer( 32, 32, 32 );	aBuffer->BeginDrawing();	::PlotCIcon( &r, theIcon );	aBuffer->EndDrawing();		aBuffer->DebugShowInWindow();	delete aBuffer;	::DisposeCIcon( theIcon );}#endif#ifdef NOTUSEDvoid DoDebug2(){	CTabHandle		h1, h2;		h1 = ::GetCTable( 8 );	h2 = ::GetCTable( 8 );		char aString[ 256 ];	sprintf( aString, "h1=$%lx  h2=$%lx  *h1=%lx *h2=%lx", h1, h2, *h1, *h2 );	CtoPstr( aString );	DebugStr( (unsigned char*) aString );	}#endif