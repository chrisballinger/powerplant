// Copyright ©2005, 2006 Freescale Semiconductor, Inc.
// Please see the License for the specific language governing rights and
// limitations under the License.
// ===========================================================================
//	StResourceContext.h			© 1994-97 Metrowerks Inc. All rights reserved.
// ===========================================================================
//
//   Created: 12/19/94
//     $Date: 2006/01/18 01:33:25 $
//	$History: StResourceContext.h $
//	
//	*****************  Version 4  *****************
//	User: scouten      QDate: 02/21/97   Time: 11:16
//	Updated in $/Constructor/Source files/CO- Core/Resource manager
//	Improved commenting.
//	
//	*****************  Version 3  *****************
//	User: Andrew       Date: 2/03/97    Time: 5:21p
//	Updated in $/ConstructorWin/Includes
//	Added #include to fix error generated by lack of prefix file under
//	MSVC++
//	
//	*****************  Version 2  *****************
//	User: scouten      QDate: 01/23/97   Time: 14:06
//	Updated in $/Constructor/Source files/CO- Core/Resource manager
//	Cleaned up source in preparation for refactoring.
//	
//	*****************  Version 1   *****************
//	User: scouten      Date: 10/16/96   Time: 02:09
//	Created
//	Comment: Baseline source 15 October 1996.
//	
// ===========================================================================

#pragma once

	// PowerPlant : PP headers
#include <PP_Types.h>


// ===========================================================================
//		* Constant definitions
// ===========================================================================

const Int16 ResourceContext_NoFile = -1;


// ===========================================================================
//		* StResourceContext
// ===========================================================================
//
//	StResourceContext is a stack-based class which changes the current
//	resource file (via UseResFile) and restores it upon its destruction.
//
//	StApplicationContext is defined at the end of this header. It changes
//	CurResFile to the application's resource fork.
//
// ===========================================================================

class StResourceContext {

public:
							StResourceContext(Int16 inContext = ResourceContext_NoFile);
	virtual					~StResourceContext();

	// CurResFile changers
	
	void					Enter();
	void					Exit();
	void					Save();

	// status accessors

	inline Boolean			IsValid() const
									{ return mIsValid; }
	inline Boolean			InContext() const
									{ return mInContext; }
	static inline Int16		GetApplicationRefNum()
									{ return sAppContext; }

	static Boolean			CurrentContextIsValid();
	static Int16			GetCurrentRefNum();


	// data members

private:
	Boolean					mIsValid;					// true if we have a valid context
	Boolean					mInContext;					// true if this resource file is active
	Boolean					mSavedContext;				// true if Save() was called
	Int16					mPrevContext;				// previous resource fork to restore
	Int16					mThisContext;				// current resource fork
	StResourceContext*		mSaveContext;				// previous resource context object
	
	static Int16			sAppContext;				// application's resource fork
	static StResourceContext* sCurrentContext;			// current resource context

};


// ===========================================================================
//		* StApplicationContext
// ===========================================================================
//	Stack-based class to enter & exit the main application's resource context.

class StApplicationContext : public StResourceContext {

public:
	StApplicationContext()
		: StResourceContext(GetApplicationRefNum()) {}
	
};
